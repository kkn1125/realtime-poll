generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  email     String   @unique
  username  String
  password  String   @db.VarChar(200)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Poll       Poll[]
  Vote       Vote[]
  PollResult PollResult[]

  @@map("user")
}

model Poll {
  id          String   @id @default(uuid()) @db.Uuid
  title       String
  description String
  options     Json
  createdBy   String?  @map("created_by") @db.Uuid
  expiresAt   DateTime @default(now()) @map("expires_at")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  User       User?        @relation(fields: [createdBy], references: [id])
  PollResult PollResult[]

  @@map("poll")
}

model PollResult {
  id     String  @id @default(uuid()) @db.Uuid
  userId String? @map("user_id") @db.Uuid
  pollId String? @map("poll_id") @db.Uuid
  answer Json

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Poll Poll? @relation(fields: [pollId], references: [id])
  User User? @relation(fields: [userId], references: [id])
}

model Vote {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String?  @map("user_id") @db.Uuid
  pollId    String?  @map("poll_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  User User? @relation(fields: [userId], references: [id])

  @@map("vote")
}
