generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model UserProfile {
  id        String   @id @default(uuid()) @db.Uuid
  image     Bytes    @db.ByteA
  createdAt DateTime @default(now())
  userId    String   @db.Uuid

  user User @relation(fields: [userId], references: [id])

  @@map("user_profile")
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  email     String   @unique
  username  String
  password  String   @db.VarChar(200)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  poll        Poll[]
  vote        Vote[]
  pollResult  PollResult[]
  userProfile UserProfile[]

  @@map("user")
}

model SharePoll {
  id     String @id @default(uuid()) @db.Uuid
  pollId String @map("poll_id") @db.Uuid

  poll Poll @relation(fields: [pollId], references: [id])

  @@map("share_poll")
}

model Poll {
  id          String   @id @default(uuid()) @db.Uuid
  title       String
  description String
  options     Json
  createdBy   String?  @map("created_by") @db.Uuid
  expiresAt   DateTime @default(now()) @map("expires_at")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user       User?        @relation(fields: [createdBy], references: [id])
  pollResult PollResult[]
  sharePoll  SharePoll[]

  @@map("poll")
}

model PollResult {
  id     String  @id @default(uuid()) @db.Uuid
  userId String? @map("user_id") @db.Uuid
  pollId String? @map("poll_id") @db.Uuid
  answer Json

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  poll Poll? @relation(fields: [pollId], references: [id])
  user User? @relation(fields: [userId], references: [id])

  @@map("poll_result")
}

model Vote {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String?  @map("user_id") @db.Uuid
  pollId    String?  @map("poll_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User? @relation(fields: [userId], references: [id])

  @@map("vote")
}
