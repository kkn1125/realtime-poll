generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model UserProfile {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @unique @db.Uuid
  image     Bytes    @db.ByteA
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("user_profile")
}

model User {
  id        String    @id @default(uuid()) @db.Uuid
  email     String    @unique
  username  String
  password  String    @db.VarChar(200)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  userProfile    UserProfile?
  poll           Poll[]
  vote           Vote[]
  response       Response[]
  voteResponse   VoteResponse[]
  sendMessage    Message[]      @relation("sendMessage")
  receiveMessage Message[]      @relation("receiveMessage")
  Board          Board[]

  @@map("user")
}

model SharePoll {
  id     String @id @default(uuid()) @db.Uuid
  pollId String @unique @map("poll_id") @db.Uuid

  poll Poll @relation(fields: [pollId], references: [id])

  @@map("share_poll")
}

model Poll {
  id          String    @id @default(uuid()) @db.Uuid
  title       String    @db.VarChar(30)
  description String?
  createdBy   String    @map("created_by") @db.Uuid
  expiresAt   DateTime? @map("expires_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  user User @relation(fields: [createdBy], references: [id])

  question  Question[]
  response  Response[]
  sharePoll SharePoll?

  @@map("poll")
}

model Question {
  id          String  @id @default(uuid()) @db.Uuid
  pollId      String  @map("poll_id") @db.Uuid
  type        String  @default("input") @map("type") @db.VarChar(20)
  title       String  @db.VarChar(30)
  description String?
  order       Int?
  isRequired  Boolean @default(false) @map("is_required")
  isMultiple  Boolean @default(false) @map("is_multiple")
  useEtc      Boolean @default(false) @map("use_etc")

  poll Poll @relation(fields: [pollId], references: [id])

  answer Answer[]
  option Option[]

  @@map("question")
}

model Response {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String?  @map("user_id") @db.Uuid
  pollId    String   @map("poll_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  poll Poll  @relation(fields: [pollId], references: [id])
  user User? @relation(fields: [userId], references: [id])

  answer Answer[]

  @@map("response")
}

model Answer {
  id         String  @id @default(uuid()) @db.Uuid
  responseId String?  @map("response_id") @db.Uuid
  questionId String  @map("question_id") @db.Uuid
  optionId   String? @map("option_id") @db.Uuid
  // select, multiple checkbox
  value      String? @db.VarChar(100)
  // text input only

  response Response? @relation(fields: [responseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  question Question @relation(fields: [questionId], references: [id])
  option   Option?  @relation(fields: [optionId], references: [id])

  @@map("answer")
}

model Option {
  id         String @id @default(uuid()) @db.Uuid
  questionId String @map("question_id") @db.Uuid
  content    String @db.VarChar(150)

  question Question @relation(fields: [questionId], references: [id])
  answer   Answer[]

  @@map("option")
}

model Vote {
  id          String    @id @default(uuid()) @db.Uuid
  userId      String    @map("user_id") @db.Uuid
  title       String    @db.VarChar(30)
  description String
  isMultiple  Boolean   @map("is_multiple")
  useEtc      Boolean   @default(false) @map("use_etc")
  expiresAt   DateTime? @map("expires_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])

  voteOption   VoteOption[]
  voteResponse VoteResponse[]

  @@map("vote")
}

model VoteResponse {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String?  @map("user_id") @db.Uuid
  voteId    String   @map("vote_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user       User?        @relation(fields: [userId], references: [id])
  vote       Vote         @relation(fields: [voteId], references: [id])
  voteAnswer VoteAnswer[]

  @@map("vote_response")
}

model VoteAnswer {
  id             String  @id @default(uuid()) @db.Uuid
  voteResponseId String? @map("vote_response_id") @db.Uuid
  voteOptionId   String? @map("vote_option_id") @db.Uuid
  value          String? @db.VarChar(100)

  voteResponse VoteResponse? @relation(fields: [voteResponseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  voteOption   VoteOption?   @relation(fields: [voteOptionId], references: [id])

  @@map("vote_answer")
}

model VoteOption {
  id        String   @id @default(uuid()) @db.Uuid
  voteId    String   @map("vote_id") @db.Uuid
  content   String   @db.VarChar(100)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  vote       Vote         @relation(fields: [voteId], references: [id])
  voteAnswer VoteAnswer[]

  @@map("vote_option")
}

model Message {
  id        String   @id @default(uuid()) @db.Uuid
  fromId    String   @map("from_id") @db.Uuid
  toId      String   @map("to_id") @db.Uuid
  message   String
  checked   Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  sender   User @relation("sendMessage", fields: [fromId], references: [id])
  receiver User @relation("receiveMessage", fields: [toId], references: [id])

  @@map("message")
}

model Board {
  id         String    @id @default(uuid()) @db.Uuid
  userId     String    @map("user_id") @db.Uuid
  order      Int?
  category   String    @db.VarChar(50)
  title      String    @db.VarChar(100)
  content    String
  viewCount  Int       @default(0)
  isPrivate  Boolean   @default(false)
  isOnlyCrew Boolean   @default(false)
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")

  author User @relation(fields: [userId], references: [id])

  @@map("board")
}
